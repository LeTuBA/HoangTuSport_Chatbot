---
description: 
globs: 
alwaysApply: false
---
# CHATBOT COSMETIC SHOP RULES

## KIẾN TRÚC TỔNG THỂ

Chatbot được triển khai với kiến trúc microservice gồm 2 phần chính:

```
[Frontend] <--> [Spring Boot Backend] <--> [Python Chatbot Service]
                      |                             |
                [MySQL Database]              [Vector Database]
```

## STACK CÔNG NGHỆ

- **Backend Chính**: Spring Boot + MySQL
- **Chatbot Service**: Python + FastAPI + OpenAI Agent SDK
- **Vector Database**: ChromaDB/Qdrant
- **Embedding Model**: OpenAI/HuggingFace Sentence Transformers

## QUY TẮC PHÁT TRIỂN

### 1. Tổ Chức Python Chatbot Service

```
python-chatbot-service/
├── app/
│   ├── api/              # API endpoints
│   │   ├── __init__.py
│   │   ├── endpoints.py
│   │   └── models.py
│   ├── agents/           # Định nghĩa các agent
│   │   ├── __init__.py
│   │   ├── product_agent.py
│   │   ├── cart_agent.py
│   │   ├── shop_agent.py
│   │   └── manager_agent.py
│   ├── rag/              # RAG components
│   │   ├── __init__.py
│   │   ├── embeddings.py
│   │   ├── retriever.py
│   │   └── vector_store.py
│   ├── tools/            # Tool functions
│   │   ├── __init__.py
│   │   ├── product_tools.py
│   │   ├── cart_tools.py
│   │   └── checkout_tools.py
│   ├── client/           # Spring Boot API clients
│   │   ├── __init__.py
│   │   └── spring_client.py
│   └── core/             # Core configurations
│       ├── __init__.py
│       ├── config.py
│       └── security.py
├── prompts/              # Agent prompts
├── tests/
├── requirements.txt
└── main.py
```

### 2. Quy Ước API

#### API Python Service
- **POST /chat**: Endpoint chính xử lý tin nhắn
  - Request: `{"message": string, "thread_id": string, "user_id": string}`
  - Response: `{"response": string, "products": array, "actions": array}`

- **POST /sync**: Endpoint đồng bộ dữ liệu
  - Request: `{"type": "products|categories", "data": array}`
  - Response: `{"status": string, "count": number}`

#### API Spring Boot Proxy
- **POST /api/chatbot**: Gateway cho Python service
  - Request: `{"message": string, "threadId": string}`
  - Response: `{"response": string, "products": array, "actions": array}`

### 3. Mô Hình Multi-Agent

- **Manager Agent**: Điều phối và định tuyến yêu cầu
- **Product Agent**: Xử lý truy vấn sản phẩm với RAG
- **Cart Agent**: Quản lý giỏ hàng
- **Shop Agent**: Thông tin cửa hàng, hỗ trợ khách hàng

### 4. Tools API

```python
# Ví dụ Tool Product
@tool
def get_product_info(query: str) -> List[Dict]:
    """Truy xuất thông tin sản phẩm dựa trên truy vấn"""
    # Thực hiện RAG retrieval
    return [{"id": "123", "name": "Kem dưỡng XYZ", "price": 250000, ...}]

# Ví dụ Tool Cart
@tool
def add_to_cart(product_id: str, quantity: int = 1) -> Dict:
    """Thêm sản phẩm vào giỏ hàng"""
    # Gọi Spring Boot API
    response = api_client.post("/api/cart/add", {"productId": product_id, "quantity": quantity})
    return response.json()
```

### 5. Quy Trình Tích Hợp

1. Frontend gửi request chat đến Spring Boot
2. Spring Boot xác thực và chuyển tiếp đến Python service
3. Python service xử lý với multi-agent
4. Khi cần thực hiện actions, agent gọi API Spring Boot
5. Kết quả được trả về Spring Boot và Frontend

### 6. Đồng Bộ Dữ Liệu

- Dữ liệu sản phẩm được đồng bộ từ MySQL sang Vector DB
- Đồng bộ được trigger theo:
  - Schedule định kỳ (cron job)
  - Webhook khi có thay đổi dữ liệu
  - API thủ công

### 7. Security

- Xác thực giữa services bằng API key
- Spring Boot xử lý JWT từ người dùng
- Rate limiting cho API chatbot
- Validate input và sanitize output

## THAM KHẢO

- GitHub Repo: @bangoc123/agentic-rag
- OpenAI Agent Documentation: https://platform.openai.com/docs/assistants
- LangChain RAG: https://python.langchain.com/docs/use_cases/question_answering/ 